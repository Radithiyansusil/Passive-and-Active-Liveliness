# -*- coding: utf-8 -*-
"""Load_Liveliness_model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bCNLYVAXfbyWzZlVfCtxAbfNuqDeIOAe

Libraries
"""

!pip install mediapipe

import cv2
import numpy as np
import pandas as pd
import mediapipe as mp

"""Function Code:"""

mpDraw=mp.solutions.drawing_utils
mpFacemesh=mp.solutions.face_mesh
facemesh=mpFacemesh.FaceMesh(max_num_faces=1,static_image_mode=True)
# drawing_spec = mpDraw.DrawingSpec(color=(0, 0, 255), thickness=1, circle_radius=0)

def X_Y(img,results,width,height):
  try:
    X_coordinate=[]
    Y_coordinate=[]
    # Iterate over each detected face
    for face_landmarks in results.multi_face_landmarks:
        # Iterate over each landmark point
        for landmark_id, landmark in enumerate(face_landmarks.landmark):
            # Convert the normalized coordinates to image coordinates
            x = int(landmark.x * width)
            y = int(landmark.y * height)
            X_coordinate.append(x)
            Y_coordinate.append(y)
    return X_coordinate,Y_coordinate
  except:
    return "Reupload"

def eye_check(X_coordinate,Y_coordinate,width,height):
  eye_right=((Y_coordinate[145]-Y_coordinate[159])+(Y_coordinate[144]-Y_coordinate[160])+(Y_coordinate[153]-Y_coordinate[158]))/(X_coordinate[133]-X_coordinate[33])
  eye_left=((Y_coordinate[374]-Y_coordinate[386])+(Y_coordinate[373]-Y_coordinate[387])+(Y_coordinate[380]-Y_coordinate[385]))/(X_coordinate[263]-X_coordinate[362])
  eye_score=(eye_left+eye_right)/2
  x_non=len(list(filter(lambda x: x <0 or x>width, X_coordinate)))
  y_non=len(list(filter(lambda y: y<0 or y>height, Y_coordinate)))
  score=eye_score-(x_non+y_non)/468#correction term
  if score>1:
    return 1
  elif score>0:
    return score
  else:
    return 0

def left_check(X_coordinate):
  oval_cooridinates= [
    10, 338, 297, 332, 284, 251, 389, 356, 454, 323,
    361, 288, 397, 365, 379, 378, 400, 377, 152, 148,
    176, 149, 150, 136, 172, 58, 132, 93, 234, 127,
    162, 21, 54, 103, 67, 109
  ]
  X_left=sum(1 for num in oval_cooridinates if X_coordinate[num] < X_coordinate[4])
  return X_left/len(oval_cooridinates)

def right_check(X_coordinate):
  oval_cooridinates= [
    10, 338, 297, 332, 284, 251, 389, 356, 454, 323,
    361, 288, 397, 365, 379, 378, 400, 377, 152, 148,
    176, 149, 150, 136, 172, 58, 132, 93, 234, 127,
    162, 21, 54, 103, 67, 109
  ]
  X_right=sum(1 for num in oval_cooridinates if X_coordinate[num] > X_coordinate[4])
  return X_right/len(oval_cooridinates)

"""Result"""

video_path=input("Enter_the_video_path:")
cap=cv2.VideoCapture(video_path)
try:
  k=3
  while k>0:
    success,img=cap.read()
    imgRGB=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    height, width, _ = imgRGB.shape  # Get the height and width of the image
    results=facemesh.process(imgRGB)
    if results.multi_face_landmarks:
      X_coordinate,Y_coordinate=X_Y(img,results,width,height)
    if((k==3) and (eye_check(X_coordinate,Y_coordinate,width,height)>0.6)):
      print("Eye_check_done")
      k=2
    elif((k==3) and (eye_check(X_coordinate,Y_coordinate,width,height)<0.6)):
      print("Eyes_closed,Reupload")
      break
      break
    if((k==2) and (right_check(X_coordinate)<0.8)):
      continue
    elif((k==2) and (right_check(X_coordinate)>0.8)):
      print("Right_Check_done")
      k=1
    if((k==1) and (left_check(X_coordinate)<0.8)):
      continue
    elif((k==1) and (left_check(X_coordinate)>0.8)):
      print("Left_check_done")
      k=0
      break
      break
except:
    if(k==2):
      print("Right_check_and_Left_check_failed,Reupload")
    elif(k==1):
      print("Left_check_failed,Reupload")
    elif(k==3):
      print("Liveness_check_failed,Reupload")