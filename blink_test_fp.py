# -*- coding: utf-8 -*-
"""Blink_Test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1htkfhXuyPiU_i2Nb9eJO80QbSNRUXbgQ

Libraries
"""

!pip install mediapipe

# from google.colab import drive

# drive.mount('/content/drive')

import warnings
warnings.filterwarnings('ignore')

import cv2
import numpy as np
import pandas as pd
import mediapipe as mp

# from PIL import Image
# import io
# import cv2
# import tempfile
# import os
# import boto3
# import json

# import pandas as pd
# from sklearn.metrics import accuracy_score, confusion_matrix
# from sklearn.metrics import precision_score, recall_score, f1_score
# import matplotlib.pyplot as plt
# import seaborn as sns

# detector = dlib.get_frontal_face_detector()
# predictor = dlib.shape_predictor('/content/drive/My Drive/shape_predictor_68_face_landmarks.dat')

"""Functions to run:"""

# def show_image_aws(image_path):
#   # Load the image
#   # Retrieve the object from S3
#   obj = s3_resource.Object(bucket_name, image_path)
#   image_data = obj.get()['Body'].read()
#   image = Image.open(io.BytesIO(image_data))
#   image = cv2.cvtColor(np.array(image), cv2.COLOR_BGR2RGB)
#   image= cv2.resize(image, (512, 512))
#   height, width,channels = image.shape
#   return image,width,height

# def show_image_local(image_path):
#   image=Image.open(image_path)
#   width, height = image.size
#   image_1= image.convert("RGB")
#   image = cv2.cvtColor(np.array(image_1), cv2.COLOR_BGR2RGB)
#   image= cv2.resize(image, (512, 512))
#   height, width,channels = image.shape
#   return image,width,height

def X_Y(img,results,width,height):
  try:
    X_coordinate=[]
    Y_coordinate=[]
    # Iterate over each detected face
    for face_landmarks in results.multi_face_landmarks:
        # Iterate over each landmark point
        for landmark_id, landmark in enumerate(face_landmarks.landmark):
            # Convert the normalized coordinates to image coordinates
            x = int(landmark.x * width)
            y = int(landmark.y * height)
            X_coordinate.append(x)
            Y_coordinate.append(y)
    return X_coordinate,Y_coordinate
  except:
    return "Reupload"

def eye_open_score(X_coordinate,Y_coordinate,width,height):
  eye_right=((Y_coordinate[145]-Y_coordinate[159])+(Y_coordinate[144]-Y_coordinate[160])+(Y_coordinate[153]-Y_coordinate[158]))/(X_coordinate[133]-X_coordinate[33])
  eye_left=((Y_coordinate[374]-Y_coordinate[386])+(Y_coordinate[373]-Y_coordinate[387])+(Y_coordinate[380]-Y_coordinate[385]))/(X_coordinate[263]-X_coordinate[362])
  eye_score=(eye_left+eye_right)/2
  x_non=len(list(filter(lambda x: x <0 or x>width, X_coordinate)))
  y_non=len(list(filter(lambda y: y<0 or y>height, Y_coordinate)))
  score=eye_score-(x_non+y_non)/468#correction term
  if score>1:
    return 1
  elif score>0:
    return score
  else:
    return 0

mpDraw=mp.solutions.drawing_utils
mpFacemesh=mp.solutions.face_mesh
facemesh=mpFacemesh.FaceMesh(max_num_faces=1,static_image_mode=True)
# drawing_spec = mpDraw.DrawingSpec(color=(0, 0, 255), thickness=0, circle_radius=1)

"""Final function"""

video_path=input("Enter_the_video_path:")
cap=cv2.VideoCapture(video_path)
try:
  k=3
  while k>0:
    success,img=cap.read()
    imgRGB=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    height, width, _ = imgRGB.shape  # Get the height and width of the image
    results=facemesh.process(imgRGB)
    if results.multi_face_landmarks:
      X_coordinate,Y_coordinate=X_Y(img,results,width,height)
    if((k==3) and (eye_open_score(X_coordinate,Y_coordinate,width,height)>0.6)):
      k=2
      image_save=img #storing the image when the eye is open for further selfie use
    elif((k==2) and (eye_open_score(X_coordinate,Y_coordinate,width,height)<0.6)):
      k=1
    elif((k==1) and (eye_open_score(X_coordinate,Y_coordinate,width,height)>0.6)):
      print("Blink Test Done")
      cv2.imwrite('/content/drive/My Drive/image_saved_after_Blink.jpg', image_save) #store the image once blink is checked
      k=0
      break
      break

except:
  if(k!=0):
    print("Blink_test_failed,Reupload")